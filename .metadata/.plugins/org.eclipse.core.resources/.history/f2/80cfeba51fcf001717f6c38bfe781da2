/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f10x.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_tim.h"
#include "stm32f10x_adc.h"
#include "stm32f10x_usart.h"
#include "misc.h"

void GPIO_config(void);
void TIM_config(void);
void ADC_config(void);
void USART_config(void);
void USART_puts(const char *);
void NVIC_config(void);
			

int main(void)
{
	GPIO_config();
	TIM_config();
	NVIC_config();

	GPIOE->ODR = 0x00000000;
	//TIM_Cmd(TIM3, ENABLE);
	USART_config();
	USART_puts("Hello! My dear friend!");
	while(1){
		/*
		if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET){
			TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
			GPIOE->ODR = ~GPIOE->ODR;
		}
		*/
		/*
		int timer_value = TIM_GetCounter(TIM3);
		if(timer_value == 5000){
			GPIO_WriteBit(GPIOE, GPIO_Pin_2, 1);
		} else if(timer_value == 5500) {
			GPIO_WriteBit(GPIOE, GPIO_Pin_2, 0);
		}
		*/
	}
}


void GPIO_config(void)
{

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
	GPIO_InitTypeDef init;
	init.GPIO_Mode = GPIO_Mode_Out_PP;
	init.GPIO_Pin = GPIO_Pin_All;
	init.GPIO_Speed = GPIO_Speed_10MHz;

	GPIO_Init(GPIOE, &init);
}

void TIM_config(void)
{
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	TIM_TimeBaseInitTypeDef init;
	init.TIM_CounterMode = TIM_CounterMode_Up;
	init.TIM_ClockDivision = TIM_CKD_DIV4;
	init.TIM_Period = 18000;
	init.TIM_Prescaler = 1000;
	init.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM3, &init);
	TIM_Cmd(TIM3, ENABLE);
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
}

void ADC_config(void)
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
	GPIO_InitTypeDef io_init;
	io_init.GPIO_Mode = GPIO_Mode_AIN;
	io_init.GPIO_Pin = GPIO_Pin_4;
	GPIO_Init(GPIOC, &io_init);

	RCC_ADCCLKConfig(RCC_PCLK2_Div4);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
	ADC_InitTypeDef init;
	init.ADC_Mode = ADC_Mode_Independent;
	init.ADC_DataAlign = ADC_DataAlign_Right;
	init.ADC_ScanConvMode = DISABLE;
	init.ADC_ContinuousConvMode = ENABLE;
	init.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
	init.ADC_NbrOfChannel = 1;
	ADC_Init(ADC1, &init);

	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 1, ADC_SampleTime_28Cycles5);
	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
	ADC_Cmd(ADC1, ENABLE);
}

void USART_config(void)
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);

	// setup Rx and Tx IO port
	GPIO_InitTypeDef io_init;
	io_init.GPIO_Pin = GPIO_Pin_9;
	io_init.GPIO_Mode = GPIO_Mode_AF_PP; // Tx port
	io_init.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOA, &io_init);
	io_init.GPIO_Pin = GPIO_Pin_10;
	io_init.GPIO_Mode = GPIO_Mode_IN_FLOATING; // Rx port
	GPIO_Init(GPIOA, &io_init);

	USART_InitTypeDef init;
	init.USART_BaudRate = 9600;
	init.USART_WordLength = USART_WordLength_8b;
	init.USART_StopBits = USART_StopBits_1;
	init.USART_Parity = USART_Parity_No;
	init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_Init(USART1, &init);
	USART_Cmd(USART1, ENABLE);
}

void USART_put_int16(uint16_t in)
{
	if(in == 0)
	{
		USART_puts("0");
		return;
	}

	uint16_t base = 10000;
	char flag = 0;
	for(;;){
		uint16_t a = in / base;
		if(a != 0) {
			flag = 1;
		}
		if(flag){

		}
		base /= 10;
	}
}


void USART_puts(const char *str)
{
	while(*str){
		USART_SendData(USART1, *str++);
		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
	}
}

void NVIC_config(void)
{
	NVIC_InitTypeDef N_init;
	N_init.NVIC_IRQChannel = TIM3_IRQn;
	N_init.NVIC_IRQChannelCmd = ENABLE;
	N_init.NVIC_IRQChannelPreemptionPriority = 0;
	N_init.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&N_init);
}

